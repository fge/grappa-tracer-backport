buildscript {
    repositories {
        maven { url "http://repo.spring.io/plugins-release" };
    }
    dependencies {
        classpath(group: "org.springframework.build.gradle",
            name: "propdeps-plugin", version: "0.0.7");
    }
}

apply(plugin: "java");
apply(plugin: "maven");
apply(plugin: "signing");
apply(plugin: "idea");
apply(plugin: "eclipse");
apply(plugin: "propdeps");
apply(plugin: "propdeps-maven");
apply(plugin: "propdeps-idea");
apply(plugin: "propdeps-eclipse");


group = "com.github.fge";
description = "A backport of the trace parser for grappa 1.0.x/parboiled1";
version = "2.0.0-sonar";

def javaVersion = JavaVersion.VERSION_1_7;
sourceCompatibility = javaVersion;
targetCompatibility = javaVersion; // defaults to sourceCompatibility


repositories {
    mavenCentral();
    mavenLocal();
}

dependencies {
    provided(group: "com.google.code.findbugs", name: "jsr305",
        version: "3.0.0");
    compile(group: "com.github.parboiled1", name: "grappa",
        version: "1.0.4-sonar");
}

javadoc.options.links("http://docs.oracle.com/javase/7/docs/api/");

test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

task enforceVersion << {
    def foundVersion = JavaVersion.current();
    if (foundVersion != javaVersion)
        throw new IllegalStateException("Wrong Java version; required is "
            + javaVersion + ", but found " + foundVersion);
}

compileJava.dependsOn(enforceVersion);

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.2.1";
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}

task pom << {
    pom {}.writeTo("${projectDir}/pom.xml");
}

/*
 * SIGNING
 */

project.ext {
    gitrwscm = sprintf("git@github.com:parboiled1/%s", name);
    gitroscm = sprintf("https://github.com/parboiled1/%s.git", name);
    projectURL = sprintf("https://github.com/parboiled1/%s", name);
    sonatypeStaging = "https://oss.sonatype.org/service/local/staging/deploy/maven2/";
    sonatypeSnapshots = "https://oss.sonatype.org/content/repositories/snapshots/";
};

task checkSigningRequirements << {
    def requiredProperties = [ "sonatypeUsername", "sonatypePassword" ];
    def noDice = false;
    requiredProperties.each {
        if (project.properties[it] == null) {
            noDice = true;
            System.err.printf("property \"%s\" is not defined!", it);
        }
    }
    if (noDice)
        throw new IllegalStateException("missing required properties for " +
            "upload");
}

uploadArchives {
    dependsOn(checkSigningRequirements);
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment);
            }

            repository(url: "${sonatypeStaging}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }

            snapshotRepository(url: "${sonatypeSnapshots}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }
        }
    }
}

/*
 * Configure pom.xml on install, uploadArchives
 */
[
    install.repositories.mavenInstaller,
    uploadArchives.repositories.mavenDeployer
]*.pom*.whenConfigured { pom ->
    pom.project {
        name "${project.name}";
        description "${project.description}";
        packaging "jar";
        url "${projectURL}";

        scm {
            url "${gitrwscm}";
            connection "${gitrwscm}";
            developerConnection "${gitroscm}";
        }

        licenses {
            license {
                name "Apache Software License, version 2.0";
                url "http://www.apache.org/licenses/LICENSE-2.0";
                distribution "repo";
            }
        }

        developers {
            developer {
                id "fge";
                name "Francis Galiegue";
                email "fgaliegue@gmail.com";
            }
        }
    }
}

ext.forRelease = !version.endsWith("-SNAPSHOT");
signing {
    required { forRelease && gradle.taskGraph.hasTask("uploadArchives") };
    sign configurations.archives;
}

